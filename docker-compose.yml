services:
  logstash:
    depends_on:
      - elasticsearch
      - kafka
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:8.5.3
    networks:
      - app-net
    environment:
      - "LOGSTASH_HTTP_HOST=0.0.0.0"
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/pipeline/logstash-prod.conf:/usr/share/logstash/pipeline/logstash.conf

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - ELASTIC_PASSWORD=admin
    networks:
      - app-net
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.5.3
    networks:
      - app-net
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    volumes:
      - kibana_config:/usr/share/kibana/config

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    networks:
      - app-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    container_name: kafka
    depends_on:
      - zookeeper
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    networks:
      - app-net
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10

  gateway:
    image: nginx:latest
    container_name: gateway
    ports:
      - "80:80"
    networks:
      - app-net
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - auth-service
      - tasks-service
      - log-service

  db:
    image: postgres:14
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    networks:
      - app-net
    volumes:
      - postgres-data:/var/lib/postgresql/data

  log-service:
    image: kostyabet228/crm-system:log_service-latest
    container_name: log-service
    networks:
      - app-net
    expose:
      - "5002"
    depends_on:
      db:
        condition: service_started
      kafka:
        condition: service_healthy
    restart: on-failure
    environment:
      ACCESSTOKENSECRET: ${ACCESSTOKENSECRET}
      REFRESHTOKENSECRET: ${REFRESHTOKENSECRET}
      KAFKA_BROKER: kafka:9092

  auth-service:
    image: kostyabet228/crm-system:auth_service-latest
    container_name: auth-service
    networks:
      - app-net
    expose:
      - "5000"
    depends_on:
      db:
        condition: service_started
      kafka:
        condition: service_healthy
    restart: on-failure
    environment:
      ACCESSTOKENSECRET: ${ACCESSTOKENSECRET}
      REFRESHTOKENSECRET: ${REFRESHTOKENSECRET}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      KAFKA_BROKER: kafka:9092

  tasks-service:
    image: kostyabet228/crm-system:tasks_service-latest
    container_name: tasks-service
    networks:
      - app-net
    expose:
      - "5001"
    depends_on:
      db:
        condition: service_started
      kafka:
        condition: service_healthy
    restart: on-failure
    environment:
      ACCESSTOKENSECRET: ${ACCESSTOKENSECRET}
      REFRESHTOKENSECRET: ${REFRESHTOKENSECRET}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      GATEWAY_URL: http:/gateway:80
      KAFKA_BROKER: kafka:9092

  frontend:
    image: kostyabet228/crm-system:frontend-latest
    container_name: frontend
    networks:
      - app-net
    ports:
      - "3000:3000"
    environment:
      VITE_API_LOCAL: http:/gateway:80

networks:
  app-net:
    driver: bridge

volumes:
  kibana_config:
  es_data:
  postgres-data: {}